import{_ as n,o as s,c as a,a as e}from"./app-DyzXA5-Z.js";const o="/assets/1712643529423-fb3bab7f-b7b2-46e4-bed2-55eedf6ec6f1-R4tajUv_.png",p="/assets/1712644874591-d4bcc799-275a-4e36-ad48-6e07d6a77fc9-BMmx3vpt.png",t="/assets/1712648849535-cf86664f-a6ce-44df-a517-e37ff5db9907-CSlm4h5F.png",c="/assets/1712648938698-5e18e8e9-b19b-4d16-a4e1-188449c240f0-CI1BWJZo.png",d="/assets/1712634916922-b6ffadb3-5797-473d-aa0c-45fa37aad564-D1dX5Hiy.png",i="/assets/1712636909098-0ac983fa-d440-4385-885c-5c8a841d7afe-en-c7h43.png",l="/assets/1712637068799-307852f5-1643-4918-9226-0bc0a72e9b26-BNApenwY.png",r="/assets/1712643066866-b54b2cd4-0142-42b0-a100-1ab38aee4ad0-DMrc-qPz.png",u="/assets/1712644471977-9be01973-e3d4-4b46-9674-76f60e999248-ZLwUyV_E.png",k="/assets/1712646407554-d164ce14-1920-490a-8c86-99cfcf19a255-DBy6sFad.png",m="/assets/1712646735085-f6b30df1-0caa-47e3-96a8-fa18d6d944ce-BWbUhHwv.jpeg",v="/assets/1712646854881-34b03aac-5669-49bf-8f42-0122df1235ab-B-sFNR-l.jpeg",b="/assets/1712646913962-c7560e59-82b0-4f35-bef6-0d72d2cb3b57-C2420Ijh.jpeg",y="/assets/1712647001197-1408244f-8418-4b92-b391-298da7668650-HGWoByos.jpeg",h={},g=e(`<h1 id="变量-基础数据类型" tabindex="-1"><a class="header-anchor" href="#变量-基础数据类型"><span>变量 &amp; 基础数据类型</span></a></h1><p>我们都知道计算机中有一个必不可少的硬件——内存，程序在运行时的数据都需要先从外存(硬盘)加载到内存中才可以正确运行。假设计算机是一个国家，操作系统就是国务院，内存就像是这个国家的土地，为了方便管理这片土地，于是给每一块土地编上了号，称为地址，我们创建的数据会被存放在这里，假设现在内存以及地址编号是这样的：</p><table><thead><tr><th>0x0000</th><th>0x0003</th><th>0x0006</th></tr></thead><tbody><tr><td>0x0001</td><td>0x0004</td><td>0x0007</td></tr><tr><td>0x0002</td><td>0x0005</td><td>0x0008</td></tr></tbody></table><p>在0x0004和0x0008这两块地址上各存放一个数字10，</p><table><thead><tr><th>0x0000</th><th>0x0003</th><th>0x0006</th></tr></thead><tbody><tr><td>0x0001</td><td>0x0004 10</td><td>0x0007</td></tr><tr><td>0x0002</td><td>0x0005</td><td>0x0008 10</td></tr></tbody></table><p>需要注意的是这两个地址中存储的数据虽然都是10，但是这两个10并不是同一个。</p><p>此时想要操作0x0004上的数字10，则需要通过0x0004这个地址编号来操作，但是地址编号又长又很多看起来密密麻麻的，在编程的时候不方便使用，于是就有了变量。</p><p>大家好，欢迎来到《从0开始的Python基础课》第1期，本期我们来学习变量这个知识点。</p><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><h3 id="变量的定义" tabindex="-1"><a class="header-anchor" href="#变量的定义"><span>变量的定义</span></a></h3><p>变量的名字是自己取的，比如 <code>my_age</code> ，因此很方便操作，比如这个数字 <code>10</code>，想要使用变量来存储它，则可以写成 <code>my_age = 10</code> ，<code>=</code> 号在 <code>Python</code> 中被称为赋值运算符，意思是把数字 <code>10</code> 放到变量 <code>my_age</code> 中，这个过程叫做赋值。</p><p>很多书籍和课程中会形象的解释变量像盒子一样，用来存储数据的。但通过刚才我们对内存的了解知道数据其实是存储在内存的，那么变量是什么呢？</p><p>在 <code>Python</code> 中，变量是对内存地址的引用，可以理解为变量中存储的是内存地址，而并不是真实的数据。比如</p><p><code>age = 10</code> 实际这个变量存储的是数字 <code>10</code> 所在的那块内存地址。关于这一点我们待会儿再继续去解释和验证。</p><p>变量定义的具体格式为：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>变量名 = 任意数据类型的值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>变量名是自己取的，但是注意哦，并不是随便怎么取都可以，需要遵循一定的规则，它必须是数字、字母、下划线组成的，不可以是数字开头，</p><p>比如 <code>my_name</code> 是可以的， <code>1my_age</code> 是不可以的，因为是以数字开头了。数字、字母、下划线并不是都要有，比如 <code>my_name</code> 就没有数字，数字、字母、下划线随机组合即可，纯字母也可以，比如 <code>myname</code> 。其次变量名不可以使用 Python 的保留字，所谓保留字就是 Python 官方已经使用过的一些名字，比如 <code>True</code> 、<code>False</code> 等等，保留字不需要去记忆，编写变量名字的时候稍微注意点别是 Python 已经使用过的就可以了。</p><p>边学边测：以下哪些可以作为变量名？</p><ol><li><code>my_age</code></li><li><code>99girl</code></li><li><code>myPhoneNumber</code></li><li><code>_abc</code></li><li><code>_123</code></li><li><code>123_abc</code></li></ol><h3 id="变量的重新赋值" tabindex="-1"><a class="header-anchor" href="#变量的重新赋值"><span>变量的重新赋值</span></a></h3><p>变量的 <code>=</code> 号是赋值的意思，需要注意它不是数学中代数的表达，完整的表达应该是右边的值赋值给了左边的变量名。</p><p>既然是赋值，那么可不可以给变量重新赋一个新的值呢？</p><p>我们来尝试一下，先把数字 <code>10</code> 赋值给变量 <code>x</code> ，把它打印出来，然后再把数字 <code>20</code> 赋值给变量 <code>x</code> ，再打印变量 <code>x</code> 查看结果。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
x <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><img src="`+o+`" alt="img" style="zoom:70%;"><p>可以看到第一个 <code>print()</code> 打印出来的结果是 <code>10</code> ，第二个 <code>print()</code> 打印出来的结果是 <code>20</code> 。变量的值改变了。在 <code>Python</code> 中这个操作叫做变量的重新赋值。</p><p>从这里也可以看出程序是从上往下一行一行执行的，先执行的代码在运行结果中先显示。在编程中叫做顺序执行。</p><p>变量不仅可以重新赋值新的数据，还可以重新赋值变量。比如</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
y <span class="token operator">=</span> x
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><img src="`+p+`" alt="img" style="zoom:70%;"><p>在这段代码中，首先把数字 <code>10</code> 赋值给变量 <code>x</code> ，第二行代码是把变量 <code>x</code> 赋值给变量 <code>y</code> ，最后打印结果，结果就是把变量 <code>x</code> 的值给了变量 <code>y</code> ，因此结果是 <code>10</code> 。</p><p>定义变量不仅可以一次定义一个，还可以一次定义多个，比如</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><img src="`+t+`" alt="img" style="zoom:70%;"><p><code>print()</code> 也可以一次输出多个，比如这个代码就可以改为</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><img src="`+c+`" alt="img" style="zoom:70%;"><p>接下来我们再来看赋值运算符 <code>=</code> 号的右边，<code>=</code> 右边是变量的值，它可以是任意数据类型的，这里我们需要学习一个新的知识点——数据类型。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="认识基本数据类型" tabindex="-1"><a class="header-anchor" href="#认识基本数据类型"><span>认识基本数据类型</span></a></h3><p>为了方便管理数据，把数据分为了不同的类型，比如我们已经见过的数字，还可以分为整数和小数，整数一般我们称为整数类型，使用 <code>int</code> 表示。 小数一般我们称为浮点类型，使用 <code>float</code> 表示。除了数字之外我们还见过字符串，字符串是使用一对英文引号包括起来的数据，使用 <code>str</code> 表示。</p><p>除了我们见过的数字和字符串两种数据类型之外，<code>Python</code> 还有一个常用基础数据类型——布尔类型，</p><p>使用 <code>bool</code> 表示，这种类型只有两个值，即 <code>真</code> 和 <code>假</code> ，<code>Python</code> 中 <code>真</code> 使用 <code>True</code> 表示，<code>假</code> 使用 <code>False</code> 表示。</p><p>我们来创建几个变量分别存储不同的数据类型数据查看一下。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
y <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span>
z <span class="token operator">=</span> <span class="token boolean">True</span>
q <span class="token operator">=</span> <span class="token number">1.23</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><img src="`+d+`" alt="img" style="zoom:70%;"><h3 id="查看变量数据类型函数——type" tabindex="-1"><a class="header-anchor" href="#查看变量数据类型函数——type"><span>查看变量数据类型函数——type()</span></a></h3><p>变量就是用来方便我们操作数据的，可以直接在 <code>print()</code> 中打印变量，即可将变量的值打印出来，不知道有没有朋友注意到一个小问题，变量 <code>x</code> 中存储的是 <code>数字 10</code> ，变量 <code>y</code> 中存储的是<code>字符串 10</code>，在运行程序之后显示的都是 <code>10</code>，我们很难通过运行结果判断出 10 是什么数据类型的，那么该如何查看数据的类型呢？</p><p>在 <code>Python</code> 中可以使用 <code>type()</code> 函数来查看数据的类型，比如查看变量 <code>x</code> 的数据类型，则可以在刚才的代码最后加上一句代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
y <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span>
z <span class="token operator">=</span> <span class="token boolean">True</span>
q <span class="token operator">=</span> <span class="token number">1.23</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><img src="`+i+`" alt="img" style="zoom:70%;"><p>可以看到结果中显示了 <code>&lt;class &#39;int&#39;&gt;</code> ，int 是 Python 中整型的表达。因此可以知道变量 x 中存储的数据是整型，同样的方法可以查看变量 <code>y</code> 的数据类型：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
y <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span>
z <span class="token operator">=</span> <span class="token boolean">True</span>
q <span class="token operator">=</span> <span class="token number">1.23</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><img src="`+l+`" alt="img" style="zoom:70%;"><p>可以看到变量 y 的数据类型是 <code>str</code>，即字符串类型。</p><h2 id="探索变量的本质" tabindex="-1"><a class="header-anchor" href="#探索变量的本质"><span>探索变量的本质</span></a></h2><h3 id="查看内存地址的方法" tabindex="-1"><a class="header-anchor" href="#查看内存地址的方法"><span>查看内存地址的方法</span></a></h3><p>到目前为止我们已经知道了变量如何定义和使用，接下来我们回到开始的地方探索一下变量的本质，我们说</p><p><code>Python</code> 中的变量本质上是对地址的引用，变量中实际存储的是数据的地址而不是真实的数据，想要验证这一点，就需要找到数据的真实内存地址是什么，在 <code>Python</code> 中可以使用 <code>id()</code> 函数查看内存地址。</p><p>比如这里有一个变量 <code>x = 10</code> ，使用 <code>id(x)</code> 即可查看到它的内存地址，使用 <code>print()</code> 将它打印出来。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><img src="`+r+`" alt="img" style="zoom:70%;"><p>需要注意的是，你的代码打印出的结果和我的大概率是不一样的，因为在我的计算机内存中数字 <code>10</code> 存储的位置和你的大概率不是在同一块内存地址上。</p><h3 id="探索变量本质" tabindex="-1"><a class="header-anchor" href="#探索变量本质"><span>探索变量本质</span></a></h3><p>为了探索变量的本质，我们给 x 重新赋一个新的值：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果运行代码之后，第一个 <code>print()</code> 打印出来的结果和第二个 <code>print()</code> 打印出来的地址结果一致，</p><p>说明 <code>10</code> 和 <code>20</code> 这两个数据使用的是同一块内存地址存储的，给变量重新赋值相当于是把数字 <code>10</code> 修改为了 <code>20</code> ，</p><p>如果打印出来的结果不一致则意味着变量中存储的数据并不是在同一块内存地址上。来看运行结果：</p><p>运行结果：</p><img src="`+u+`" alt="img" style="zoom:70%;"><p>可以看到结果并不一致，验证了在 <code>Python</code> 中变量其实存储的并不是真实的数据，而是数据的内存地址。</p><p>我们可以进一步探索，定义一个新的变量 <code>y</code> , 把变量 <code>x</code> 赋值给变量 <code>y</code> ，最后打印出变量 <code>y</code> 的内存地址：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> x
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果最后一个 <code>print()</code> 打印出的结果和倒数第二个 <code>print()</code> 打印的结果一致，说明变量中存储的是地址，第五行代码 <code>y = x</code> 其实是把变量 <code>x</code> 中存储的地址赋值给了 变量 <code>y</code> 。查看打印结果</p><p>运行结果：</p><img src="`+k+'" alt="img" style="zoom:70%;"><p>从结果可以看得出后面两个地址是一样的，再一次证实在 <code>Python</code> 中变量存储的其实是地址而不是真实的数据。</p><p>为了可以更加清晰的展示，我们来绘图整理一下这段代码，首先是有一个数字 <code>10</code> ，它存储在内存地址中，</p><p>变量 <code>x</code> 保存了这个地址</p><img src="'+m+'" alt="img" style="zoom:50%;"><p>然后有一个数字 <code>20</code> ，它存储在另外一块内存中</p><img src="'+v+'" alt="img" style="zoom:50%;"><p>把数字 <code>20</code> 赋值给变量 <code>x</code> 实际是把它的内存地址给到了 <code>x</code> 。</p><img src="'+b+'" alt="img" style="zoom:50%;"><p>再然后是把变量 <code>x</code> 赋值给变量 <code>y</code> ，实际是把变量 <code>x</code> 中的内存地址赋值给了变量 <code>y</code>。</p><img src="'+y+`" alt="img" style="zoom:50%;"><p>因此实际上变量 <code>x</code> 和变量 <code>y</code> 中存储的是同一个内存地址。这种实际存储的是内存地址的情况，我们称为引用。可以说变量 <code>x</code> 和 变量 <code>y</code> 引用了同一块内存。因此修改变量的值实际上是更换了变量的引用，而不是真的修改了内存中存储的那个数据。因此 <code>x = 10</code> 这样的一句代码，我们除了可以说“把数字 <code>10</code> 赋值给了变量 <code>x</code> ”之外，还可以说“变量 <code>x</code> 指向了数字 <code>10</code> 的内存地址”。</p><br><p>好了，以上就是本节的内容了，我们学习了变量的定义、了解了基础的数据类型，有整型、浮点型、字符串、和布尔类型，最后探索了 <code>Python</code> 中变量的本质。多说一点关于代码的编写规范，比如在编写变量赋值的时候，我们写的是 <code>x = 10</code> ，在 <code>=</code> 号的两侧各留有一个空格，如果不加这两个空格也是符合语法的，但是为了让代码编写得更加清晰，因此制定了一些人为规范，一般会在 <code>=</code> 号的两侧各增加一个空格。</p><h2 id="小节测试" tabindex="-1"><a class="header-anchor" href="#小节测试"><span>小节测试</span></a></h2><p>最后我们来做一些练习：</p><ol><li>下面代码中两个 print() 打印的结果是否一致？</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> <span class="token number">20</span>
y <span class="token operator">=</span> x
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p><code>True001</code> 是否是一个正确的变量命名？</p></li><li><p>下面代码运行结果是</p></li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
y <span class="token operator">=</span> x
x <span class="token operator">=</span> y
y <span class="token operator">=</span> <span class="token number">20</span>
x <span class="token operator">=</span> y
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>变量交换：有变量 <code>x</code> 和变量 <code>y</code>，分别存储了数字 <code>10</code> 和数字 <code>20</code>，要求编写代码交换两个变量的值。</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
y <span class="token operator">=</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><p>好了，以上就是本期的所有内容了，如果觉得对你有所帮助的话，欢迎关注，我们下期再见～拜拜～</p>`,109),x=[g];function _(f,w){return s(),a("div",null,x)}const z=n(h,[["render",_],["__file","01.html.vue"]]),q=JSON.parse('{"path":"/Python/Python%E5%9F%BA%E7%A1%80/01.html","title":"变量 & 基础数据类型","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[{"level":3,"title":"变量的定义","slug":"变量的定义","link":"#变量的定义","children":[]},{"level":3,"title":"变量的重新赋值","slug":"变量的重新赋值","link":"#变量的重新赋值","children":[]}]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"认识基本数据类型","slug":"认识基本数据类型","link":"#认识基本数据类型","children":[]},{"level":3,"title":"查看变量数据类型函数——type()","slug":"查看变量数据类型函数——type","link":"#查看变量数据类型函数——type","children":[]}]},{"level":2,"title":"探索变量的本质","slug":"探索变量的本质","link":"#探索变量的本质","children":[{"level":3,"title":"查看内存地址的方法","slug":"查看内存地址的方法","link":"#查看内存地址的方法","children":[]},{"level":3,"title":"探索变量本质","slug":"探索变量本质","link":"#探索变量本质","children":[]}]},{"level":2,"title":"小节测试","slug":"小节测试","link":"#小节测试","children":[]}],"git":{"updatedTime":1715931648000,"contributors":[{"name":"leemiao","email":"lm951103@126.com","commits":1}]},"filePathRelative":"Python/Python基础/01.md"}');export{z as comp,q as data};
