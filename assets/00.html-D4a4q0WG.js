import{_ as s,o as a,c as p,a as n,b as e}from"./app-DyzXA5-Z.js";const t={},i=n('<h1 id="环境搭建-递归算法-1" tabindex="-1"><a class="header-anchor" href="#环境搭建-递归算法-1"><span>环境搭建&amp;递归算法(1)</span></a></h1><blockquote><p>小标题：00|开发环境搭建|递归(一)| 基本数列递归</p></blockquote><h2 id="本篇简介" tabindex="-1"><a class="header-anchor" href="#本篇简介"><span>本篇简介</span></a></h2><p>本篇文章和视频主要介绍了C++开发环境的搭建和递归算法中的基本数列递归</p><h2 id="视频" tabindex="-1"><a class="header-anchor" href="#视频"><span>视频</span></a></h2>',5),l=e("iframe",{src:"//player.bilibili.com/player.html?aid=917732423&bvid=BV1Bu4y1Y7ow&cid=1313197562&p=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"800",height:"500px"},null,-1),c=n(`<h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入</span></a></h2><p>大家好，欢迎来到《系统入门 C++算法课》的第 0 期</p><p>在本系列课程中我将带领大家使用 C++从零开始入门算法、并实现一些经典算法。</p><p>试图帮助大家练习基础语法的同时，循序渐进的理解算法，实现算法。</p><p>在观看学习本系列课程之前，我希望你拥有 C 语言或者 C++语言的基础，了解基本的变量、基础数据类型、控制语句、函数等语法。</p><p>如果你没有基础的话，也可以在了解了相关概念的同时学习本系列。</p><p>接下来，介绍一下本系列课程的开发环境，在整个系列中，都将使用 DEV-C++ 这个软件，它是一个开源免费的 C/C++ 集成开发环境，其他虽然也有很多很好用的编辑器或集成开发环境，但考虑到观看视频的用户可能有一部分是准备参加各种编程比赛的学生，在一些编程比赛中官方推荐使用的开发环境是 DEV-C++，因此本系列课程选用了它。</p><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建"><span>环境搭建</span></a></h2><p>接下来的时间我们一起安装开发环境并进入第一个知识的学习。</p><p>打开浏览器搜索 DEV-C++或者搜索 DEV-CPP，找到这个网址，打开之后进行下载。</p><p>软件的安装包链接我也放在了视频简介中，大家可以将它下载下来进行安装</p><p>双击软件进行安装，首先会弹出语言的选择，这里先选择英文安装即可，紧接着选择 I agree、选择 next、在这里我们可以选择软件安装的位置，点击 Browse 按钮，打开文件管理，我选择安装在 D 盘，因此在 D 盘创建了一个新的名为 DEV 的文件夹，选择这个位置，完成之后点击 Install 进行安装。安装完成之后首次打开会弹出一个设置选择界面，在这里选择中文，点击 Next，接下来是自定义颜色等，可以根据个人喜好修改或者不修改直接 Next，设置完成点击 OK 即可。</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>接下来我们讲讲软件的基本使用，使用快捷键 Ctrl + n，可以快速新建一个源代码文件，或者点击左上角文件-新建-源代码，效果是一样的，在这个界面中就可以编写代码了。调整代码的文字大小可以按下 Ctrl 键之后滚动鼠标滚轮。</p><p>由于我们需要使用 C++11 的标准，还需要进行一个设置，打开工具-编译选项界面勾选编译时加入一下命令，在下方的框中补充一行代码：-std=c++11，点击确定即可。</p><p>在编辑器的左侧有项目管理的框，我们学习算法基本用不上项目管理，因此可以把这个框关掉，点击是视图菜单，把项目管理勾选掉即可。此时我们的开发环境就准备完成了。</p><h2 id="递归" tabindex="-1"><a class="header-anchor" href="#递归"><span>递归</span></a></h2><h3 id="基本数列递归" tabindex="-1"><a class="header-anchor" href="#基本数列递归"><span>基本数列递归</span></a></h3><p>接下来我们来学习第一个知识点——递归</p><p>有的朋友可能不会把递归当做算法，课程从递归开始的原因在于递归是很多算法的基础，因此第一个知识点定为了递归。</p><p>简单解释递归就是函数的自我调用。这么解释它是不好理解的，我们直接使用它的应用场景来理解。</p><p>这里有 5 个数：</p><p>1 4 7 10 13</p><p>请发现它们之间的规律并在弹幕打出下一个数（停顿）</p><p>没错它是一个等差数列，每项之间相差 3</p><p>那么它的规律可以写作 A(n) = A(n-1) + 3</p><p>即当前项的值是前一项的值加 3</p><p>因此现在要求出第 6 项的值，那么就必须知道第 5 项的值，要知道第 5 项的值，就必须知道第 4 项的值，以此类推，直到第一项。</p><p>这么描述可能很清晰了，那么和递归有什么关系呢？</p><p>看以下需求：</p><p>使用递归方式求解等差数列 1 4 7 10 13 ... 第 n 项的值，要求输入 n ，输出第 n 项的值。</p><p>我们来编写代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> res<span class="token punctuation">;</span>

    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是 C++ 代码的基本框架，如果你有基础的话，这里应该很容易理解。</p><p>接着在这里定义一个函数，在定义函数时，首先思考这个函数是用来干嘛的，这里是求等差数列的第 n 项的值，对于这个等差数列来说，第 n 项的值一定是个整数，因此这个函数的返回值是一个整数。</p><p>所以首先确定函数的返回值是 int ，紧接着取一个函数名字 f ，函数是求数列的第 n 项的值，因此需要一个参数接收 n，它也是整数类型。</p><p>注意，函数如果有返回值的情况，先把返回值写好，以免忘记，这是一个比较好的习惯，返回值是一个整数，因此定义一个整数变量用来返回。</p><p>这个函数可以求出第 n 项的值，最终赋值给 res 用来返回。对于这个数列来说，第 n 项的值是第 n-1 项的值 +3 ，这个函数既然可以求第 n 项的值，那么自然也可以求第 n-1 项的值，所以可以调用它自己来求出第 n-1 项的值，也就是 f(n-1) + 3 。</p><p>我们来演示一下这个函数</p><p>假设我们要求出第 6 项的值</p><p>则是</p><p>f(6) =</p><p>要求出第 6 项的值，则需要求出第 5 项的值 + 3</p><p>f(6) = f(5) + 3</p><p>此时要求出 f(5) 的值，则需要知道前一项 f(4) 的值 + 3</p><p>f(6) = f(5) + 3</p><p>= ( f(4) + 3 ) + 3</p><p>此时需要知道 f(4) 的值，则需要知道 f(3) 的值 再+ 3</p><p>f(6) = f(5) + 3</p><p>= ( f(4) + 3 ) + 3</p><p>= ( ( f(3) +3 ) + 3 )</p><p>接着再求 f(3)，等于 f(2) + 3</p><p>f(6) = f(5) + 3</p><p>= ( f(4) + 3 ) + 3</p><p>= ( ( f(3) + 3 ) + 3 )</p><p>= ( ( ( f(2) + 3 ) +3 ) + 3 )</p><p>再求 f(2) 的值，等于 f(1) +3</p><p>f(6) = f(5) + 3</p><p>= ( f(4) + 3 ) + 3</p><p>= ( ( f(3) + 3 ) + 3 )</p><p>= ( ( ( f(2) + 3 ) +3 ) + 3 )</p><p>= ( ( ( ( f(1) + 3 ) + 3 ) +3 ) + 3 )</p><p>再求 f(1) 的值，等等，f(1) 是第 1 项，第 1 项前面还有其他项吗？显然没有了。</p><p>因此递归函数不能没有限制，递归需要起始项，避免无限制递归。</p><p>所以我们修改一下代码，给这个函数一个起始项，就是第一项，也就是 n=1 的时候。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> res<span class="token punctuation">;</span>
	res <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 n = 1 时，值为 1。</p><p>可以使用一个判断语句来实现</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> res<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在开发环境中把这个函数调用一下，测试结果。结果正确。</p><h2 id="基本数列递归练习题" tabindex="-1"><a class="header-anchor" href="#基本数列递归练习题"><span>基本数列递归练习题</span></a></h2><p>到这里也许你已经听懂了递归函数的使用，但是听懂和学会可能不太一样，因此这里给出两道题，供大家学完之后练习。大家可以把自己的答案编写在评论区，编写不出来的小伙伴可以去评论区寻求帮助，我也会看评论区的~</p><blockquote><p>题 1：</p><p>使用递归函数求解等比数列</p><p>描述：输入一个整数 n ，求出等比数列 2 4 8 16 32 ... 的第 n 项的值</p><p>输入：一个整数 n</p><p>输出：一个整数，等比数列的结果</p><p>输入样例：6</p><p>输出样例：64</p></blockquote><blockquote><p>题 2：</p><p>使用递归函数求解阶乘</p><p>（阶乘举例，5 的阶乘：5！= 5<em>4</em>3<em>2</em>1）</p><p>描述：输入一个整数 n，求出 n 的阶乘结果。</p><p>输入：一个整数 n</p><p>输出：一个整数，n! 的结果</p><p>输入样例：5</p><p>输出样例：120</p></blockquote><p>除了课程本身之外，我也会单独更新一些相应的题目类课程，带大家解题，学习解题思路。</p><p>下一期，我们将继续探讨递归，以及递归的弊端。</p><p>好了以上就是本期的所有内容了，如果觉得对你有所帮助的话，欢迎关注～</p>`,77),o=[i,l,c];function r(d,u){return a(),p("div",null,o)}const v=s(t,[["render",r],["__file","00.html.vue"]]),m=JSON.parse('{"path":"/C-plusplus/Cplusplus%E7%AE%97%E6%B3%95/00.html","title":"环境搭建&递归算法(1)","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"本篇简介","slug":"本篇简介","link":"#本篇简介","children":[]},{"level":2,"title":"视频","slug":"视频","link":"#视频","children":[]},{"level":2,"title":"引入","slug":"引入","link":"#引入","children":[]},{"level":2,"title":"环境搭建","slug":"环境搭建","link":"#环境搭建","children":[{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]},{"level":2,"title":"递归","slug":"递归","link":"#递归","children":[{"level":3,"title":"基本数列递归","slug":"基本数列递归","link":"#基本数列递归","children":[]}]},{"level":2,"title":"基本数列递归练习题","slug":"基本数列递归练习题","link":"#基本数列递归练习题","children":[]}],"git":{"updatedTime":1715931648000,"contributors":[{"name":"leemiao","email":"lm951103@126.com","commits":1}]},"filePathRelative":"C-plusplus/Cplusplus算法/00.md"}');export{v as comp,m as data};
