import{_ as n,o as e,c as s,a}from"./app-DyzXA5-Z.js";const o="/assets/1712890564471-6547e9ae-7c12-4d0f-938d-8e37148f80a2-DXMzBpHS.png",t="/assets/1712544539058-88c9ba05-71b8-4b20-b8ad-792ed6386379-B4ldVwNu.png",d="/assets/1712545380560-57003819-cdb3-4d16-ac85-3090fdb68292-NyK5f-UJ.png",c="/assets/1712913727629-a47a18ba-8fa2-4c37-8ead-11069e786ef6-C2rIA31Z.png",i="/assets/1712547677756-60cb502e-1b61-4d46-a4da-dbafa7570075-Cj1QGq3C.png",l="/assets/1712549862608-cc651259-68f0-4336-9632-27b3e6947b00-CO55Fvz_.png",p="/assets/1712550275239-c39cf2a6-e590-43a8-a1c7-f885c808361f-CHqKPbAS.png",r="/assets/1712550454213-1dba99f3-5fee-4845-9c57-edcfe45af3b8-CpXdhSZx.png",u="/assets/1712550547560-e5131d8a-cb3f-4e25-bfe3-d4eb68f07a53-DZ6YpJcb.png",h="/assets/1712554898262-dbf4e2cf-3c0e-4bdb-8b56-bb7234be6468-Dhu8fQea.png",m="/assets/1712555162821-96b7efde-29d1-43f5-afcb-4f77a697d071-BM4dxoJj.png",_="/assets/1712555501028-e1ccbc45-600b-4e90-a2f9-bef72bb214fb-Be9D7sez.png",v="/assets/1712556756914-60e616a3-f727-44e7-8e7c-ffb9b8cac9c4-DTCUF38f.png",y="/assets/1712557087908-6b892d6c-232b-4c43-b7dc-3f8e15cca9a3-SlrCzFgl.png",g="/assets/1712557319209-39cfbdb6-e32c-4bc6-a15d-c1bdd13859dc-B1H638vM.png",b="/assets/1712558193248-8faa26c6-8a1c-4123-85ae-e40916350bed-DuGz6PFg.png",k="/assets/1712559119449-b59530b6-e252-4a83-aaec-57f07ef68a27-DpUxEGxV.png",f="/assets/1712561872711-6ab81150-599c-43a5-9a31-fc2a2b3253e3-Cma_u1tM.png",q="/assets/1712562099230-c276035a-041e-4563-ae44-f84ec98712d2-e_mV5n8-.png",P={},w=a(`<h1 id="环境搭建-基础知识" tabindex="-1"><a class="header-anchor" href="#环境搭建-基础知识"><span>环境搭建 &amp; 基础知识</span></a></h1><blockquote><p>备注：本系列《Python基础》文章是视频稿转化而来，因此读起来可能比较偏向口语化一些。</p></blockquote><p>大家好，欢迎来到《从0开始的Python基础课》第0期，</p><p>在本系列中我将带领大家完全从0开始学习 Python 。</p><p>在观看学习本系列之前，我希望你已经搜索了解了 Python 是什么以及它的历史。</p><p>好了，废话不多说，我们直接开始：</p><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入</span></a></h2><p>这是一段 Python 的代码，通过解释器运行之后，会在终端中显示出 <code>hello, world</code> 。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这段看似简单的代码，几乎包含了 Python 学习中必不可少的入门知识点，比如代码是什么？解释器是什么？终端是什么？代码是怎么运行的？等等等等。</p><p>你可以在任何可以编写文字的地方编写这段代码，比如在 <code>Mac OS</code> 系统中可以使用 <code>文本编辑</code> 软件，</p><p><code>Windows</code> 系统中可以使用 <code>记事本</code> 软件，编写这段代码，然后将它保存下来。如果是在 <code>Mac</code> 系统中则默认它的文件后缀名是 <code>.rtf</code> ，如果你看不到文件后缀名则可以找到访达中的设置把 <code>显示所有文件扩展名</code> 勾选上，</p><img src="`+o+'" alt="img" style="zoom:40%;"><p>如果你使用的是 <code>Windows</code> 系统，则记事本默认的文件后缀名是 <code>.txt</code> ，无论是哪个系统，我们想要打开这个编写的文件，那么大概还是会用 <code>文本编辑</code> 软件来打开它。</p><p><code>Python</code> 的文件格式后缀名是 <code>.py</code> ，想要打开它，则同样需要对应的“软件”才能打开，这个“软件”就是</p><p><code>Python</code> 解释器了，Python 解释器有很多，官方的 <code>Python</code> 解释器是 <code>CPython</code> 。因此想要编写</p><p><code>Python</code> 代码并运行它则首先下载安装一个 <code>Python</code> 解释器是必不可少的啦。</p><h2 id="安装python官方解释器" tabindex="-1"><a class="header-anchor" href="#安装python官方解释器"><span>安装Python官方解释器</span></a></h2><p>首先打开 <code>Python</code> 的官网 https://www.python.org/</p><p>把鼠标移动到 Downloads 上即可看到你当前系统对应的 <code>Python</code> 。把它下载下来，然后双击开始安装，Windows 系统在安装时需要注意在第一个界面中把 <code>add to Path</code> 勾选上，其他的全部选择默认下一步安装即可。MacOS 的朋友可以不用安装 <code>Python</code>，因为 MacOS 系统本身自带了 <code>Python</code> 解释器。</p><p>安装好 <code>Python</code> 之后，Windows 系统的朋友打开搜索框，搜索 <code>powershell</code> 打开它，MacOS 的朋友在启动台搜索框中搜索 <code>终端</code> 打开它。为了方便称呼，无论是 <code>Windows系统</code> 还是 <code>MacOS</code> 未来我们统一称这个黑窗口为 <code>Terminal</code> 或 <code>终端</code>，在窗口中输入 <code>python</code>，然后回车，会出现这样的界面即表示 <code>Python</code> 安装成功啦。</p><img src="'+t+'" alt="img" style="zoom:40%;"><p>这个界面中显示了 <code>Python 3.9.6</code> ，其中第一个数字3是 <code>Python</code> 的大版本号，第二个数字是中版本号，最后一个是小版本号，此时大家下载的版本和我这里展示的版本可能并不一致，这是没有关系，基础阶段学习我们只需要关注大版本号是否为3就可以了，未来需要使用到不同版本的 <code>Python</code> 时，我们可以使用 <code>Pyenv</code> 来安装多个版本的 <code>Python</code> 。</p><p>这个带有三个大于号的界面是 <code>Python</code> 的交互式界面，所谓的交互式界面就像是我们交流时的对话一样，我说一句你说一句，比如我们在这里输入 <code>1+1</code> 然后回车，它就会给我们回复一个数字 <code>2</code> 。这就是交互界面。</p><img src="'+d+'" alt="img" style="zoom:40%;"><h2 id="安装代码编辑器" tabindex="-1"><a class="header-anchor" href="#安装代码编辑器"><span>安装代码编辑器</span></a></h2><p>当然关闭这个界面我们所写的任何代码也就不在了，因此我们需要找到一个类似 <code>文本编辑</code> 的软件来编写代码，有很多可以用来编写 <code>Python</code> 代码的编辑器，比如 Pycharm 、VS Code 等等等等。这里我选用免费开源的 <code>VS Code</code>，打开 <code>VS Code</code> 的官网，下载安装即可。</p><p>安装完成打开 <code>VS Code</code> ，界面可能是英文的，如果想要把界面改为中文，则可以点击左侧扩展位置再在搜索框中搜索 <code>Chinese</code> 安装这个插件之后重启软件即可。</p><img src="'+c+'" alt="img" style="zoom:40%;"><img src="'+i+'" alt="img" style="zoom:40%;"><h2 id="尝试编写代码" tabindex="-1"><a class="header-anchor" href="#尝试编写代码"><span>尝试编写代码</span></a></h2><p>接下来我们来编写之前的这段代码，首先为了方便管理代码，可以在任意位置创建一个文件夹专门用来存储我们编写的 <code>Python</code> 代码，比如我这里专门创建了一个名为 <code>LearnPython</code> 的文件夹。</p><img src="'+l+'" alt="img" style="zoom:30%;"><p>回到 <code>VSCode</code> 中，从 <code>菜单栏</code> 中的 <code>文件</code> 下找到 <code>打开文件夹</code> 然后在弹出框中找到刚才创建的 <code>LearnPython</code> 文件夹，选择这个文件夹打开。</p><img src="'+p+'" alt="img" style="zoom:40%;"><img src="'+r+'" alt="img" style="zoom:40%;"><p>点击文件夹名称旁边的第一个新建文件按钮图标，取名为 <code>hello.py</code> 。</p><img src="'+u+'" alt="img" style="zoom:40%;"><img src="'+h+`" alt="img" style="zoom:40%;"><p>然后在这个文件中编写代码:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>保存代码，然后在右上角找到三角形的运行按钮，点击按钮右侧的倒三角找到 <code>在专用终端中运行Python文件</code></p><p>就可以在编辑器代码区的下方看到运行结果了。</p><img src="`+m+'" alt="img" style="zoom:40%;"><h2 id="print-作用和字符串" tabindex="-1"><a class="header-anchor" href="#print-作用和字符串"><span>print()作用和字符串</span></a></h2><p>这段代码运行之后在终端打印出了 <code>hello world</code> 文字。可以尝试修改代码中双引号里的内容再次运行程序查看结果，比如修改为 <code>&quot;hello Python&quot;</code> ，再运行程序。</p><img src="'+_+`" alt="img" style="zoom:40%;"><p>会发现修改双引号中的内容为什么，运行程序就会显示出什么。这就是 <code>print()</code> 的作用，print 英文单词本身的意思是 <code>打印</code> 。这里 <code>print()</code> 的作用就是把括号中的内容打印到终端。有的朋友可能会问，刚才的代码中的 <code>print()</code> 中的文字还有一对双引号，为什么没有打印到终端呢？这是因为在 <code>Python</code> 中这种被一对英文引号包裹的数据被称为字符串，这对英文引号可以认为是字符串的一种标志，如果想要在终端显示出引号，则需要再写一对引号，但是注意不能在双引号里面再次使用双引号，可以使用单引号，比如这样</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;hello Python&#39;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+v+`" alt="img" style="zoom:70%;diplay:inline;float:left;"><p>运行结果就是这样的了。</p><p>如果想要显示双引号，则可以反过来，在外面使用单引号，在里面使用双引号，像这样</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;hello Python&quot;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+y+`" alt="img" style="zoom:70%;display:inline;float:left;"><p>运行结果就是这样带有双引号的了。关于字符串的内容未来会再单独详细说明。</p><p>既然 print() 可以把括号中的内容打印出来，那么是不是意味着我们可以使用它打印任何内容呢？比如打印数字，</p><p>我们可以尝试一下。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果：</p><img src="`+g+`" alt="img" style="zoom:70%;display:inline;float:left;"><p>果然可以打印出数字。</p><h2 id="编写多行代码" tabindex="-1"><a class="header-anchor" href="#编写多行代码"><span>编写多行代码</span></a></h2><p>到这里， <code>print()</code> 的功能我们就了解得差不多了。目前为止，我们编写的代码还只有一行，如何编写多行代码呢？假如我们想要一次打印出两行 <code>hello world</code> ，应该怎么编写代码呢？</p><p>只需要换行在下面再写一行即可</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是 <code>Python</code> 是以换行作为一行代码的结束，因此如果要写下一句代码，则需要换行另起一行而不是继续在同一行继续写，如果继续写则会报语法错误。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+b+'" alt="img" style="zoom:60%;"><h2 id="python的报错提示" tabindex="-1"><a class="header-anchor" href="#python的报错提示"><span>Python的报错提示</span></a></h2><p><code>Python</code> 的报错提示还是非常智能的，比如这个错误，首先看报错的最后一行，它提示了是 <code>SyntaxError</code> 即语法错误，<code>invalid syntax</code> 无效的语法。然后再往上看，会看到 <code>line 1</code> ，这是提示了错误在哪一行，下面还用小尖尖指到了错误的具体位置，让我们能很快的找到错误。</p><h2 id="程序注释" tabindex="-1"><a class="header-anchor" href="#程序注释"><span>程序注释</span></a></h2><p>接下来我们来讲一下注释，注释就是对代码的解释和说明，它的作用就是可以让人更好的理解代码，提高代码的可读性。</p><p>这是 Python 官方代码中的注释：</p><img src="'+k+`" alt="img" style="zoom:60%;"><p><code>Python</code> 的注释分为两种，单行注释和多行注释，单行注释使用 <code>#</code> 号，在 <code>#</code> 之后的内容不会被 <code>Python</code> 解释器执行。多行注释使用一对 <code>三引号</code>，在这对 三引号 中间的内容不会被解释器执行。</p><p>我们可以尝试一下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 使用print()打印&quot;hello world&quot;字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行这段代码，没有报错，并且和之前没有写注释时运行这段代码显示的一样。注释可以像这样写在单独的一行，也可以写在某行代码之后，比如这样，也是不影响程序运行的。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 使用print()打印&quot;hello world&quot;字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>多行注释则可以一次编写多行内容，比如这样，使用英文三引号。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
这篇代码由 LetsLearning 频道编写
主要用来教学 print() 和 字符串以及注释的使用
&quot;&quot;&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
这篇代码由 LetsLearning 频道编写
主要用来教学 print() 和 字符串以及注释的使用
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三引号包裹的字符串" tabindex="-1"><a class="header-anchor" href="#三引号包裹的字符串"><span>三引号包裹的字符串</span></a></h2><p>还记得刚才我们提到字符串的标志吗，字符串就是一对英文引号包裹起来的，双引号和单引号都可以，那么使用三引号呢？三引号当然也可以，三引号的功能是可以一次写多行，比如</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    hello world
    hello world
    hello world
      &quot;&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果</p><img src="`+f+'" alt="img" style="zoom:60%;"><p>，所以三引号不仅可以用作多行注释，也可以用作字符串的符号。</p><p>在很多网站的网页中都隐藏着一些“彩蛋”信息，比如知乎，在知乎的网页中点击鼠标右键，选择检查，这个界面叫浏览器控制台，在这里找到 <code>Console</code> ，点击它即可看到这样的一幅使用字符构成的图案，可以把这个图案复制下来，然后粘贴到字符串的三引号中。</p><img src="'+q+`" alt="img" style="zoom:40%;"><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
          _____                    _____                    _____                    _____          
         /\\    \\                  /\\    \\                  /\\    \\                  /\\    \\         
        /::\\____\\                /::\\    \\                /::\\    \\                /::\\    \\        
       /:::/    /                \\:::\\    \\              /::::\\    \\              /::::\\    \\       
      /:::/    /                  \\:::\\    \\            /::::::\\    \\            /::::::\\    \\      
     /:::/    /                    \\:::\\    \\          /:::/\\:::\\    \\          /:::/\\:::\\    \\     
    /:::/____/                      \\:::\\    \\        /:::/__\\:::\\    \\        /:::/__\\:::\\    \\    
   /::::\\    \\                      /::::\\    \\      /::::\\   \\:::\\    \\      /::::\\   \\:::\\    \\   
  /::::::\\    \\   _____    ____    /::::::\\    \\    /::::::\\   \\:::\\    \\    /::::::\\   \\:::\\    \\  
 /:::/\\:::\\    \\ /\\    \\  /\\   \\  /:::/\\:::\\    \\  /:::/\\:::\\   \\:::\\____\\  /:::/\\:::\\   \\:::\\    \\ 
/:::/  \\:::\\    /::\\____\\/::\\   \\/:::/  \\:::\\____\\/:::/  \\:::\\   \\:::|    |/:::/__\\:::\\   \\:::\\____\\::/    \\:::\\  /:::/    /\\:::\\  /:::/    \\::/    /\\::/   |::::\\  /:::|____|\\:::\\   \\:::\\   \\::/    /
 \\/____/ \\:::\\/:::/    /  \\:::\\/:::/    / \\/____/  \\/____|:::::\\/:::/    /  \\:::\\   \\:::\\   \\/____/ 
          \\::::::/    /    \\::::::/    /                 |:::::::::/    /    \\:::\\   \\:::\\    \\     
           \\::::/    /      \\::::/____/                  |::|\\::::/    /      \\:::\\   \\:::\\____\\    
           /:::/    /        \\:::\\    \\                  |::| \\::/____/        \\:::\\   \\::/    /    
          /:::/    /          \\:::\\    \\                 |::|  ~|               \\:::\\   \\/____/     
         /:::/    /            \\:::\\    \\                |::|   |                \\:::\\    \\         
        /:::/    /              \\:::\\____\\               \\::|   |                 \\:::\\____\\        
        \\::/    /                \\::/    /                \\:|   |                  \\::/    /        
         \\/____/                  \\/____/                  \\|___|                   \\/____/ 
&quot;&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序，即可看到这个图案被打印出来了，利用三引号的这个特性，还可以自己尝试去绘制一些字符画。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>好了，以上就是本期的所有内容了，本期是Python系列视频的第0期，知识点比较细小零碎，主要搭建了 <code>Python</code> 的编程环境、尝试编写了一个简单的语句 print(&quot;hello world&quot;)，学习了它的用法，了解了Python中的一种数据——字符串，以及学习了Python中的注释。</p><p>最后，如果觉得做的不错的话，欢迎关注～</p><p>下期见～</p>`,95),x=[w];function z(C,S){return e(),s("div",null,x)}const V=n(P,[["render",z],["__file","00.html.vue"]]),B=JSON.parse('{"path":"/Python/Python%E5%9F%BA%E7%A1%80/00.html","title":"环境搭建 & 基础知识","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"引入","slug":"引入","link":"#引入","children":[]},{"level":2,"title":"安装Python官方解释器","slug":"安装python官方解释器","link":"#安装python官方解释器","children":[]},{"level":2,"title":"安装代码编辑器","slug":"安装代码编辑器","link":"#安装代码编辑器","children":[]},{"level":2,"title":"尝试编写代码","slug":"尝试编写代码","link":"#尝试编写代码","children":[]},{"level":2,"title":"print()作用和字符串","slug":"print-作用和字符串","link":"#print-作用和字符串","children":[]},{"level":2,"title":"编写多行代码","slug":"编写多行代码","link":"#编写多行代码","children":[]},{"level":2,"title":"Python的报错提示","slug":"python的报错提示","link":"#python的报错提示","children":[]},{"level":2,"title":"程序注释","slug":"程序注释","link":"#程序注释","children":[]},{"level":2,"title":"三引号包裹的字符串","slug":"三引号包裹的字符串","link":"#三引号包裹的字符串","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1715931648000,"contributors":[{"name":"leemiao","email":"lm951103@126.com","commits":1}]},"filePathRelative":"Python/Python基础/00.md"}');export{V as comp,B as data};
